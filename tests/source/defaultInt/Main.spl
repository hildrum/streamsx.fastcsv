use test.source.common::*;
use com.ibm.streamsx.fastcsv::CSVFileSource;

type ShortType = uint64 recordType, rstring expectedVector, float32 floatone, float32 floattwo,uint64 intone, uint64 inttwo, list<uint8> nullVector, uint64 lineNumber;

composite Main {
graph
(stream<ShortType> FiveFields;
 stream<rstring line,int32 lineNumber> Errors) = CSVFileSource() {
    param file: "lineNumber100000.csv";
fileBufferSize: 15*16000;
requireValue: true;
                output FiveFields: nullVector = EmptyFieldVector(),
            lineNumber = LineNumber(),
            intone = Field(4,49ul);
}
/*
() as goodsink = FileSink(FiveFields) {
    param file: "good.out";
}

() as errorsink = FileSink(Errors) {
    param file: "errors.out";
 }
*/
() as errors = Custom(Errors) {

    logic state: {
    mutable int32 numTuples=0;
    }
onTuple Errors: {
    numTuples++;
    appTrc(Trace.error,"Error on line " + (rstring)lineNumber);
    assert(lineNumber%8 != 4,"Found error tuple on line "+(rstring)lineNumber+" tuple: "+(rstring)Errors);
}
onPunct Errors: {
    assert(numTuples == 600000,"Expected 600000 errors, found "+(rstring)numTuples);
}

}

() as checker = Custom(FiveFields) {
logic 
    state: {
        list<int32> maskList = [128,64,32,16,8,4,2,1];
        mutable  uint64 lastLineNumber =1;
    }
onTuple FiveFields: { 
    lastLineNumber=lineNumber;
    assert(size(nullVector) == 1,"Vector size is "+(rstring)size(nullVector)+" expected 1");
assert(recordType==6ul || intone==49ul,"Expected intone value to be 49, tuple was "+(rstring)FiveFields);
}
onPunct FiveFields:
    assert(lastLineNumber==799997ul,"Expected lastLineNumber to be 799997, but found "+(rstring)lastLineNumber);
}
}
